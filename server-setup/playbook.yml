---
- hosts: all
  become: true
  vars_files:
    - vars.yml

  tasks:
    - name: Ensure Docker is installed
      raw: |
        if command -v apt-get >/dev/null; then
          sudo apt-get install -y docker.io
        elif command -v yum >/dev/null; then
          sudo yum install -y docker
        fi

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull MySQL Docker image
      docker_image:
        name: mysql
        tag: "8.0"
        source: pull

    - name: Run MySQL container
      docker_container:
        name: "{{ mysql_container_name }}"
        image: mysql:8.0
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ db_name }}"
          MYSQL_USER: "{{ db_username }}"
          MYSQL_PASSWORD: "{{ db_password }}"
        published_ports:
          - "3306:3306"

    - name: Wait for MySQL to be ready
      wait_for:
        port: 3306
        delay: 10
        timeout: 120
    
    - name: Ensure MySQL server is up inside container
      shell: |
        until docker exec -i {{ mysql_container_name }} mysqladmin ping -u root -p{{ mysql_root_password }} --silent; do
          sleep 5
        done

    - name: Create SQL script file
      copy:
        src: ../server-setup/mysql/init.sql
        dest: "{{ sql_script_file }}"
        mode: '0644'

    - name: Execute SQL script on MySQL container
      shell: |
        docker exec -i {{ mysql_container_name }} sh -c 'exec mysql -u root -p"{{ mysql_root_password }}"' < "{{ sql_script_file }}"

    - name: Clean up SQL script file
      file:
        path: "{{ sql_script_file }}"
        state: absent

    - name: Pull Grafana Docker image
      docker_image:
        name: grafana/grafana
        tag: "latest"
        source: pull

    - name: Run Grafana container
      docker_container:
        name: "grafana"
        image: grafana/grafana:latest
        state: started
        restart_policy: always
        env:
          GF_SECURITY_ADMIN_USER: admin
          GF_SECURITY_ADMIN_PASSWORD: admin
        published_ports:
          - "3000:3000"
